run_or_experiment: "SupervisedLearningTrainable"

resources_per_trial:
    cpu: 1
    gpu: 0
stop:
    is_num_iterations_reached: 1
checkpoint_freq: 0
checkpoint_at_end: False

config:
    version: 1.2

    device: "torch.device('cpu')"

    seed: 1482555873

    num_iterations: 64

    batch_size: 1

    data_packs:
        train:
            data_loader: |-
                utils.tensordataset_data_loader_fn(
                    input_=[[1.0]],
                    target_=[[0.0,1.0]],
                    noise_std=0.0,
                    batch_size=1,
                )
            do: "['learn']"

    predictive_coding:
        grid_search:
            - True
            - False

    T: 128

    PCTrainer_kwargs:
        update_x_at: "all"
        optimizer_x_fn: "SGD"
        optimizer_x_kwargs:
            lr: 0.1
        x_lr_discount: 0.5
        x_lr_amplifier: 1.0

        update_p_at: "last"
        optimizer_p_fn: "SGD"
        optimizer_p_kwargs:
            lr:
                grid_search:
                    - 0.2

        T: "self.config['T'] if self.config['predictive_coding'] else 1"

        plot_progress_at: "[]"
        # debug
        # plot_progress_at: "np.arange(0,64*600*10,6000).tolist()"

    acf: "None"

    structure: "['Linear', 'PCLayer', 'Acf']"

    norm_layer: "None()"

    num_layers: 2

    hidden_size: 1

    # init_fn: "torch.nn.init.xavier_normal_"
    #
    # init_fn_kwargs: 1.0

    bias: False

    model_creation_code: |-
        # import
        import predictive_coding as pc
        import torch.optim as optim

        # create model

        input_size = 1
        output_size = 2

        hidden_size = self.config['hidden_size']

        self.model = []
        for l in range(self.config['num_layers']-1):
            for model_type in eval(self.config['structure']):
                if model_type=='Linear':
                    self.model.append(
                        nn.Linear(
                            input_size if l==0 else hidden_size,
                            hidden_size,
                            bias=self.config['bias'],
                        )
                    )
                elif model_type=='PCLayer':
                    self.model.append(
                        pc.PCLayer(),
                    )
                elif model_type=='Acf':
                    if self.config['acf'] != 'None':
                        self.model.append(
                            eval('nn.{}()'.format(self.config['acf'])),
                        )
                    else:
                        self.model.append(
                            nn.Identity()
                        )
                elif model_type=='Norm':
                    h = hidden_size
                    self.model.append(
                        eval('nn.{}'.format(self.config['norm_layer'])),
                    )
                else:
                    raise NotImplementedError
        self.model.append(
            nn.Linear(
                hidden_size, output_size,
                bias=self.config['bias'],
            )
        )

        # decide pc_layer
        for model_ in self.model:
            if isinstance(model_, pc.PCLayer):
                if not self.config['predictive_coding']:
                    self.model.remove(model_)

        # init
        # for model_ in self.model:
        #     if isinstance(model_, nn.Linear):
        #         eval(self.config['init_fn'])(
        #             model_.weight,
        #             **self.config['init_fn_kwargs'],
        #         )
        self.model[0].weight.data.fill_(1.0)
        self.model[-1].weight.data.fill_(1.0)

        # create sequential
        self.model = nn.Sequential(*self.model).to(self.device)

        # create pc_trainer
        self.config['PCTrainer_kwargs']['optimizer_x_fn']=eval(
            'optim.{}'.format(self.config['PCTrainer_kwargs']['optimizer_x_fn'])
        )
        self.config['PCTrainer_kwargs']['optimizer_p_fn']=eval(
            'optim.{}'.format(self.config['PCTrainer_kwargs']['optimizer_p_fn'])
        )
        self.config['PCTrainer_kwargs']['T']=eval(
            self.config['PCTrainer_kwargs']['T']
        )
        self.config['PCTrainer_kwargs']['plot_progress_at']=eval(
            self.config['PCTrainer_kwargs']['plot_progress_at']
        )
        self.pc_trainer = pc.PCTrainer(
            self.model,
            **self.config['PCTrainer_kwargs'],
        )

    train_on_batch_kwargs:
        is_log_progress: False
        # debug
        # is_log_progress: True
        is_return_results_every_t: False
        # debug
        # is_return_results_every_t: True
        is_checking_after_callback_after_t: False

    learn_code: |-
        self.model.eval()
        self.prediction = str(self.model(data)[0].tolist())

        self.model.train()

        def loss_fn(outputs, target):
            # debug
            # input('')
            return (outputs - target).pow(2).sum() * 0.5

        self.pc_trainer.train_on_batch(
            data, loss_fn,
            loss_fn_kwargs={
                'target': target,
            },
            **self.config['train_on_batch_kwargs'],
        )

    after_iteration_data_packs_code: |-

        result_dict['prediction'] = self.prediction

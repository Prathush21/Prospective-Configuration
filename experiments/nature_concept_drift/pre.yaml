run_or_experiment: "SupervisedLearningTrainable"

resources_per_trial:
    cpu: 1
    gpu: "fit_cpu"
stop:
    training_iteration: 64
max_failures: 1
fail_fast: False
checkpoint_freq: 0
checkpoint_at_end: True

config:
    device: "torch.device('cuda')"

    seed: 1482555873

    partial_num: 6000

    hidden_size: 32

    dataset: CIFAR10

    before_DatasetLearningTrainable_setup_code:
        |- # exec-code before/after the setup of the specified Trainable
        def data_loader_fn(dataset, train, batch_size, partial_num):
            return DataLoader(
                dataset_utils.partial_dateset(
                    eval(
                        'datasets.{}'.format(dataset)
                    )(
                        os.environ.get('DATA_DIR'),
                        train=train,
                        download=False,
                        transform=transforms.Compose(
                            [
                                transforms.Grayscale(),
                                transforms.ToTensor(),
                                utils.transforms_flatten,
                            ]
                        ),
                        target_transform=transforms.Compose(
                            [
                                transforms.Lambda(
                                    lambda idx: utils.np_idx2onehot(idx, 10)
                                ),
                            ]
                        )
                    ),
                    partial_num=partial_num,
                ),
                batch_size=batch_size,
                num_workers=1,
                pin_memory=True,
                shuffle=True,
            )
    data_packs:
        train:
            data_loader: |-
                data_loader_fn(
                    dataset=self.config['dataset'],
                    train=True,
                    batch_size=60,
                    partial_num=self.config['partial_num'],
                )
            do: "['learn']"
        test:
            data_loader: |-
                data_loader_fn(
                    dataset=self.config['dataset'],
                    train=False,
                    batch_size=60,
                    partial_num=self.config['partial_num'],
                )
            do: "['predict']"

    predictive_coding: False

    PCTrainer_kwargs:
        update_x_at: "all"
        optimizer_x_fn: "optim.ASGD"
        optimizer_x_kwargs:
            lr: 0.1
        x_lr_discount: 0.5

        update_p_at: "last"
        optimizer_p_fn: "optim.Adam"
        optimizer_p_kwargs:
            lr: 0.001

        T: "1000000 if self.config['predictive_coding'] else 1"

        plot_progress_at: "[]"

        update_p_at_early_stop: True
        early_stop_condition: "(self._optimizer_x is not None) and (self._optimizer_x.param_groups[0]['lr']<=0.0001)"

    acf: Sigmoid

    model_creation_code: |-

        # import
        import predictive_coding as pc
        import torch.optim as optim

        # create model
        self.model = [
            nn.Linear(
            {
                'FashionMNIST': 784,
                'CIFAR10': 1024,
            }[self.config['dataset']],
            self.config['hidden_size'], bias=False),
            pc.PCLayer(),
            eval('nn.{}()'.format(self.config['acf'])),
            nn.Linear(self.config['hidden_size'], self.config['hidden_size'], bias=False),
            pc.PCLayer(),
            eval('nn.{}()'.format(self.config['acf'])),
            nn.Linear(self.config['hidden_size'], 10, bias=False),
        ]

        # decide pc_layer
        for model_ in self.model:
            if isinstance(model_, pc.PCLayer):
                if not self.config['predictive_coding']:
                    self.model.remove(model_)

        # init
        for model_ in self.model:
            if isinstance(model_, nn.Linear):
                torch.nn.init.xavier_uniform_(model_.weight, gain=1)

        # create sequential
        self.model = nn.Sequential(*self.model).to(self.device)

        # create pc_trainer
        self.config['PCTrainer_kwargs']['optimizer_x_fn']=eval(
            self.config['PCTrainer_kwargs']['optimizer_x_fn']
        )
        self.config['PCTrainer_kwargs']['optimizer_p_fn']=eval(
            self.config['PCTrainer_kwargs']['optimizer_p_fn']
        )
        self.config['PCTrainer_kwargs']['T']=eval(
            self.config['PCTrainer_kwargs']['T']
        )
        self.config['PCTrainer_kwargs']['plot_progress_at']=eval(
            self.config['PCTrainer_kwargs']['plot_progress_at']
        )
        self.pc_trainer = pc.PCTrainer(
            self.model,
            **self.config['PCTrainer_kwargs'],
        )

        def get_model_linear_only(model):
            model_linear_only = []
            for model_ in model:
                if isinstance(model_, nn.Linear):
                    model_linear_only.append(model_)
            return nn.Sequential(*model_linear_only)

        self.get_model_linear_only = get_model_linear_only

        self.model_dir = os.path.join(os.environ.get('CODE_DIR'),'experiments','concept_drift')

    save_checkpoint_code: |- # exec-code for saving checkpoint
        checkpoint_path = os.path.join(self.model_dir, "pre_model.pth")
        torch.save(self.get_model_linear_only(self.model).state_dict(), checkpoint_path)

    predict_code: |-
        self.model.eval()
        prediction = self.model(data)
        self.classification_error = utils.get_classification_error(
            prediction, target
        )

    train_on_batch_kwargs:
        is_log_progress: False

    learn_code: |-
        self.model.train()

        def loss_fn(outputs, target):
            return (outputs - target).pow(2).sum() * 0.5

        self.pc_trainer.train_on_batch(
            data, loss_fn,
            loss_fn_kwargs={
                'target': target,
            },
            **self.config['train_on_batch_kwargs'],
        )

    log_packs:
        classification_error:
            log: "self.classification_error.item()"
            at_data_pack: "['test']"
